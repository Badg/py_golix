import time
from IPython import embed
import eic
from cryptography.hazmat.primitives.asymmetric import rsa

global start
global end
global elapsed
start = 0
end = 0
elapsed = 0

def tock():
    global start
    global end
    global elapsed
    end = time.time()
    elapsed = end - start
    start = time.time()

d = int('''
        1437587010238482518662682245206099253534965375483129603172559572
        3383465322124550242608441598851223664467773601005434551200412219
        9255120695314775665401044179392879994788082699841837483498735863
        8205488582340041012253865950188379392771822162770172170378005168
        5741698169610841965315018018608301099105170576501878485204021609
        3461009487897022442645735260723534818146422798520304531188045696
        7193304511556664741456185098040615729855412248710177426553912120
        7349373151875774566383352637682335887867707654546377798416390982
        3350269347210279951453868826939183102744335901818376597805042148
        0332412021911855222654297526054654923629523769897940117591402100
        3369403455087123431392898905468574795792066899585391969942781809
        9881068597813598720927335336562637493880609973965026430686723512
        9215560539383827694317545402783712990003312612239312403007540327
        8184895814928744231651273319397430358708432948161772580392655358
        2659954406955063426850665240940741736678966487332350921847674716
        8200653733727593192893111612391101556808065768275645233893513035
        1589207208963818822984200162896450516477046355507310132500008964
        5363275994302770025383662777044168207077334293390763427528212221
        8579019019637322109706568037238998889110191162923931429388078036
        00301903345686473
        '''.replace(' ', '').replace('\n', ''))

e = 65537

n = int('''
        7691031827755055414334384188087520553381308229635744065560819321
        8235278923761359122435056086850011861079549264415768504654809441
        4088395510926077778235774072234381732116455175472204339269930800
        5883518793536266760822988798162924103190768088283165186127618345
        5383973301370265296395945786574059520984127679363560023250282792
        7930953372106706924381514431186800112396907016051036576364975577
        6240620226439929564148081858799006782655849187242359020739897033
        1922928020774092878127818923737734455770282167837221369372654351
        7788294057805723851300587862131693306494329958977220170640738551
        4820023402452020875681199752248483243258362046139938035126749835
        5184880534990453403719056567627358649390602325884559658880342269
        1977868569913009222410843740748903061907195429469791381681400393
        5329503770536671596134106442909424670428871776481869985659520862
        2129298683932688156908635750424653282619235294804146155007552913
        6763359708363987460734661407308603961324819339535373576469145853
        6300009067996249540626539377696023798897945027179472919847988015
        4019276146509960892070885568479461921120252823218261018750717826
        6463841235223288251278784820689076884036431207677800187755195239
        7276883812691423794949601596525631355343245044568337691995038165
        79185104162546929
        '''.replace(' ', '').replace('\n', ''))

# Recover stuff because I'm lazy in the above.
p, q = rsa.rsa_recover_prime_factors(n, e, d)
dmp1 = rsa.rsa_crt_dmp1(d, p)
dmq1 = rsa.rsa_crt_dmq1(d, q)
iqmp = rsa.rsa_crt_iqmp(p, q)

bootstrap = {
                'privateExponent': d, 
                'publicExponent': e, 
                'modulus': n, 
                'prime1': p,
                'prime2': q,
                'dmp1': dmp1,
                'dmq1': dmq1,
                'iqmp': iqmp
            }
            
symmetric = b'symmetric_key' + bytes(19)
muid = (12345).to_bytes(64, 'big')

# ###############################################
# Begin tests
# ###############################################

print('Gotime!')
# eica
print('EICa')
tock()
eica = eic.io.EICa(muid, muid, symmetric, muid)
eica.encrypt(bootstrap)
tock()
print('    Encrypted... ' + str(elapsed))
eica.finalize(bootstrap)
b = eica.built
tock()
print('    Finalized, len = ' + str(len(b)) + '... ' + str(elapsed))
eica2 = eic.io.EICa.load(b)
tock()
print('    Loaded... ' + str(elapsed))
eica2.decrypt(bootstrap)
tock()
print('    Decrypted... ' + str(elapsed))
eica2.verify(bootstrap)
tock()
print('    Verified... ' + str(elapsed))
print('    Author matches: ' + str(eica.author == eica2.author))
print('    Key matches: ' + str(eica.key == eica2.key))

# eicd
print('EICd')
tock()
content = b'hello operator'
eicd = eic.io.EICd(muid, 1, content)
eicd.encrypt(symmetric)
tock()
print('    Encrypted... ' + str(elapsed))
eicd.finalize(bootstrap)
b = eicd.built
tock()
print('    Finalized, len = ' + str(len(b)) + '... ' + str(elapsed))
eicd2 = eic.io.EICd.load(b)
tock()
print('    Loaded... ' + str(elapsed))
eicd2.decrypt(symmetric)
tock()
print('    Decrypted... ' + str(elapsed))
eica2.verify(bootstrap)
tock()
print('    Verified... ' + str(elapsed))
print('    Content matches: ' + str(eicd.content == eicd2.content))



# ###############################################
# Drop into interactive mode
# ###############################################

embed()